use anyhow::Context;
use app_graphql_surrealdb::app;
use lib_common::middleware;
use poem::{
    get, handler,
    listener::TcpListener,
    session::{CookieConfig, CookieSession, Session},
    EndpointExt, Route, Server,
};
use rand::{thread_rng, Rng};
use surrealdb_rs::{embedded::Db, storage::Mem, Surreal};
// pub mod app;

#[handler]
async fn count(session: &Session) -> String {
    // let count = session.get::<i32>("count").unwrap_or(0) + 1;
    // session.set("count", count);
    let mut rng = rand::thread_rng();

    let random_number: i32 = rng.gen();
    let count =
        session
            .get::<app::user::UuidSurrealdb>("count")
            .unwrap_or(app::user::UuidSurrealdb(
                format!("lowox rand::random().to_string(), {}", rng.gen::<i32>()),
            ));
    session.set("count",  format!("lowox rand::random().to_string(), {}", rng.gen::<i32>()));
    format!("Hello!\nHow many times have seen you: {:?}", count)
}

async fn count2(db: Surreal<Db>) {
    let xx: Vec<i32> = db.select("poem_sessions").await.unwrap();
    println!("poopop: {xx:?}");
}

#[tokio::main]
async fn main() -> Result<(), std::io::Error> {
    let environment = lib_common::configurations::application::Environment::Local;
    // let redis_config = RedisConfigs::default();

    let db = Surreal::connect::<Mem>(()).await.unwrap();
    db.use_ns("namespace").use_db("database").await.unwrap();

    let session = middleware::get_session_surrealdb(db, &environment)
        .await
        .unwrap();
    if std::env::var_os("RUST_LOG").is_none() {
        std::env::set_var("RUST_LOG", "poem=debug");
    }
    tracing_subscriber::fmt::init();

    let app = Route::new().at("/", get(count)).with(session);
    // .with(CookieSession::new(CookieConfig::default().secure(false)));
    Server::new(TcpListener::bind("127.0.0.1:3000"))
        .run(app)
        .await
}
