directive @oneOf on INPUT_OBJECT

type AccountOauth {
	"""
	unique identifier for the oauth provider. Don't use name of user because that could be changed
	"""
	id: String!
	displayName: String
	email: String
	emailVerified: Boolean!
	provider: OauthProvider!
	providerAccountId: OauthProvider!
	accessToken: String!
	refreshToken: String
	"""
	access token expiration timestamp, represented as the number of seconds since the epoch (January 1, 1970 00:00:00 UTC).
	"""
	expiresAt: DateTime
	tokenType: TokenType
	scopes: [String!]!
	idToken: String
	oauthToken: String
	oauthTokenSecret: String
}

input Address {
	street: String!
	houseNumber: String!
	city: String!
	zip: String!
}


"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime




type Mutation {
	createUser(userInput: UserInput!): User!
	signIn(signInCredentials: SignInCredentials!): UserSignInResult!
	signOut: UserSignOutResult!
	"""
	Creates a new user but doesn't log in the user
	Currently like this because of future developments
	"""
	signUp(user: UserInput!): UserCreateResult!
	createPost(post: PostInput!): Post!
}

enum OauthProvider {
	GITHUB
	GOOGLE
}

"""
Information about pagination in a connection
"""
type PageInfo {
	"""
	When paginating backwards, are there more items?
	"""
	hasPreviousPage: Boolean!
	"""
	When paginating forwards, are there more items?
	"""
	hasNextPage: Boolean!
	"""
	When paginating backwards, the cursor to continue.
	"""
	startCursor: String
	"""
	When paginating forwards, the cursor to continue.
	"""
	endCursor: String
}

type Post {
	id: UUID
	posterId: UUID!
	title: String!
	content: String!
	poster: User!
}

type PostConnection {
	"""
	Information to aid in pagination.
	"""
	pageInfo: PageInfo!
	"""
	A list of edges.
	"""
	edges: [PostEdge!]!
	"""
	A list of nodes.
	"""
	nodes: [Post!]!
}

"""
An edge in a connection.
"""
type PostEdge {
	"""
	A cursor for use in pagination
	"""
	cursor: String!
	"""
	The item at the end of the edge
	"""
	node: Post!
	lowo: Boolean!
	happy: Boolean!
}

input PostInput {
	title: String!
	content: String!
}

union PostsConnectionResult = PostConnection | UserNotFoundError

type Query {
	me: UserGetResult!
	user(id: UUID!): UserGetResult!
	getUser(userBy: UserBy!): UserGetResult!
	users: [User!]!
	session: SessionResult!
	post(id: UUID!): Post!
	posts: [Post!]!
}

enum Role {
	ADMIN
	USER
}

type ServerError implements UserBaseError {
	message: String!
	solution: String!
}

type Session {
	userId: UuidSurrealdb!
}

union SessionResult = Session | UserSessionExpiredError | ServerError

input SignInCredentials {
	username: String!
	password: String!
}

type SignOutMessage {
	message: String!
	userId: UUID!
}


type Subscription {
	values: Int!
}

enum TokenType {
	BEARER
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

type User {
	id: UuidSurrealdb!
	createdAt: DateTime
	username: String!
	firstName: String
	lastName: String
	city: String
	email: String
	emailVerified: Boolean!
	age: Int
	socialMedia: [String!]!
	roles: [Role!]!
	accounts: [AccountOauth!]!
	postsConnection2(after: String, before: String, first: Int, last: Int): PostsConnectionResult!
	postsConnection(after: String, before: String, first: Int, last: Int): PostConnection!
	postCount: Int!
}

interface UserBaseError {
	message: String!
	solution: String!
}

input UserBy @oneOf {
	userId: UUID
	username: String
	address: Address
	email: String
}

union UserCreateResult = User | UserRegisterInvalidInputError | UserNotFoundError | ServerError

type UserGenericError implements UserBaseError {
	message: String!
	solution: String!
}

union UserGetResult = User | UserNotFoundError | ServerError | UserSessionExpiredError

type UserHaveNoAccessError implements UserBaseError {
	message: String!
	solution: String!
}

input UserInput {
	username: String!
	password: String
	firstName: String
	lastName: String
	city: String
	email: String
	age: Int
	socialMedia: [String!]!
}

type UserNotFoundError implements UserBaseError {
	message: String!
	solution: String!
}

type UserRegisterInvalidInputError {
	usernameErrorMessage: String!
	emailErrorMessage: String!
	dateOfBirthErrorMessage: String!
	passwordErrorMessage: String!
}

type UserSessionExpiredError implements UserBaseError {
	message: String!
	solution: String!
}

type UserSignInInvalidInputError {
	usernameErrorMessage: String!
	loginErrorMessage: String!
	emailErrorMessage: String!
	passwordErrorMessage: String!
}

union UserSignInResult = User | UserSignInInvalidInputError | UserNotFoundError | ServerError

union UserSignOutResult = SignOutMessage | UserSessionExpiredError | ServerError

"""
A UUID type provided by the SurrealDB database
"""
scalar UuidSurrealdb

schema {
	query: Query
	mutation: Mutation
	subscription: Subscription
}
