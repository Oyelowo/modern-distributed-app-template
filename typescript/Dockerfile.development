ARG BASE_IMAGE=node:18.7.0-alpine

FROM $BASE_IMAGE AS planner
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat
WORKDIR /app
COPY . .
# Copies the root and all workspaces `package.json` to /json perserving their parent directories structure
RUN mkdir /json && find . -type f -name package.json -not -path '*/node_modules/*' | xargs -i cp --parents {} /json

FROM $BASE_IMAGE AS cacher
WORKDIR /app
COPY --from=planner /app/package-lock.json .
COPY --from=planner /json .
# examples don't use package-lock.json to minimize updates 
RUN npm install --force --no-package-lock
# RUN npm ci --force


FROM $BASE_IMAGE AS builder-base
WORKDIR /app
# Copy over the cached dependencies 
COPY --from=cacher /app .

#others
COPY . .

######### START WEB SERVICE  #################
################################################################
FROM builder-base as web
ENV NEXT_TELEMETRY_DISABLED 1
ARG NEXT_PUBLIC_API_URL=localhost:8080
# RUN NEXT_PUBLIC_API_URL="localhost:8080" npm run build -- --scope=web
ENV NEXT_PUBLIC_API_URL=$NEXT_PUBLIC_API_URL
EXPOSE 3000
# CMD ["npm", "run", "dev", "--", "--scope=web"]
CMD ["npm", "run", "dev", "--w=web"]
