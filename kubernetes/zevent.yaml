apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: github
  namespace: argo-events
  annotations:
    # kubernetes.io/ingress.class: "nginx"
      # ingress.kubernetes.io/ssl-redirect: "false"
      nginx.ingress.kubernetes.io/ssl-redirect: 'false'
      nginx.ingress.kubernetes.io/use-regex: 'true'
      # nginx.ingress.kubernetes.io/rewrite-target: /
      nginx.ingress.kubernetes.io/rewrite-target: /
      # kubernetes.io/ingress.class: 'nginx'
    # nginx.ingress.kubernetes.io/rewrite-target: /
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
  # - host: localhost
  - host: 139-144-160-239.ip.linodeusercontent.com
    http:
      paths:
      - path: /
      # - path: /argo-events
        pathType: Prefix
        backend:
          service:
            name: github-eventsource-svc
            port:
              number: 12000
---
# Info on GitHub Webhook: https://developer.github.com/v3/repos/hooks/#create-a-hook
apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
    name: github
    namespace: argo-events
    # namespace: ci
spec:
    service:
        ports:
            - name: mondern-app
              port: 12000
              targetPort: 12000
            # - name: mondern-app-without-api-credentials
            #   port: 13000
            #   targetPort: 13000
    github:
        mondern-app:
            repositories:
                - owner: oyelowo
                  names:
                      - modern-distributed-app-template
                      # - argo-events
                      # - argo-workflows
            # Github application auth. Instead of using personal token `apiToken` use app PEM
            #     githubApp:
            #       privateKey:
            #         name: github-app-pem
            #         key: privateKey.pem
            #       appID: <app id>
            #       installationID: <app installation id>
            # Github will send events to following port and endpoint
            webhook:
                # endpoint to listen to events on
                endpoint: /push
                # port to run internal HTTP server on
                port: '12000'
                # HTTP request method to allow. In this case, only POST requests are accepted
                method: POST
                # url the event-source will use to register at Github.
                # This url must be reachable from outside the cluster.
                # The name for the service is in `<event-source-name>-eventsource-svc`(e.g github-eventsource-svc) format.
                # You will need to create an Ingress or Openshift Route for the event-source service so that it can be reached from GitHub.
                url: http://139-144-160-239.ip.linodeusercontent.com

            # type of events to listen to.
            # following listens to everything, hence *
            # You can find more info on https://developer.github.com/v3/activity/events/types/
            events:
                - '*'

            # apiToken refers to K8s secret that stores the github api token
            # if apiToken is provided controller will create webhook on GitHub repo
            # +optional
            apiToken:
                # Name of the K8s secret that contains the access token
                name: github-secrets
                # name: github-access
                # Key within the K8s secret whose corresponding value (must be base64 encoded) is access token
                key: password
                # key: token

            #      # webhookSecret refers to K8s secret that stores the github hook secret
            #      # +optional
            #      webhookSecret:
            #        # Name of the K8s secret that contains the hook secret
            #        name: github-access
            #        # Key within the K8s secret whose corresponding value (must be base64 encoded) is hook secret
            #        key: secret

            # type of the connection between event-source and Github.
            # You should set it to false to avoid man-in-the-middle and other attacks.
            insecure: true
            # Determines if notifications are sent when the webhook is triggered
            active: true
            # The media type used to serialize the payloads
            contentType: json


---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: operate-workflow-sa
    namespace: argo-events
---
# Similarly you can use a ClusterRole and ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
    name: operate-workflow-role
rules:
    - apiGroups:
          - argoproj.io
      verbs:
          - '*'
      resources:
          - workflows
          - workflowtemplates
          - cronworkflows
          - clusterworkflowtemplates
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
    name: operate-workflow-role-binding
roleRef:
    apiGroup: rbac.authorization.k8s.io
    kind: ClusterRole
    name: operate-workflow-role
subjects:
    - kind: ServiceAccount
      name: operate-workflow-sa
      namespace: argo-events

---
apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github
  namespace: argo-events
  # namespace: ci
spec:
  eventBusName: 'default'
  template:
    # serviceAccountName: argo-events-sa
    serviceAccountName: operate-workflow-sa
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: mondern-app
      # filtersLogicalOperator: or
      transform:
      #  "html_url": "https://github.com/Oyelowo/modern-distributed-app-template",
        # "ssh_url": "git@github.com:Oyelowo/modern-distributed-app-template.git",
        # "clone_url": "https://github.com/Oyelowo/modern-distributed-app-template.git",
        # event.body_custom.html_url: https://github.com/Oyelowo/modern-distributed-app-template
        # event.body_custom.ssh_url: git@github.com:Oyelowo/modern-distributed-app-template.git
        # event.body_custom.clone_url: https://github.com/Oyelowo/modern-distributed-app-template.git
        # event.body_custom.repository_name: modern-distributed-app-template
        # event.body_custom.repository_full_name: Oyelowo/modern-distributed-app-template
        # event.body_custom.is_default_branch: false
        # event.body_custom.is_pull_request: true
        # event.body_custom.commit_sha: b8b32f6fe3ec3e07798c0162f6f70891fb175642
        # event.body_custom.should_trigger_workflow: true
        # event.body_custom.branch: test-argo-workflow
        script: |-
            function printf(...) print(string.format(...)) end

            local function array_contains_value (tab, val)
                for index, value in ipairs(tab) do
                    if value == val then
                        return true
                    end
                end
                return false
            end

            function string.starts(String,Start)
              return string.sub(String,1,string.len(Start))==Start
            end

            local function any_starts_with (tab, val)
                if tab == nil then
                    return nil
                end

                for index, value in ipairs(tab) do
                    if string.starts(value, val) then
                        return true
                    end
                end
                return false
            end

            local actions = { "opened" , "edited", "reopened", "synchronize" }
            is_master_branch = event.body.ref == "refs/heads/master"
            is_main_branch = event.body.ref == "refs/heads/main"

            local is_default_branch = ( (event.body["X-GitHub-Event"] == "push") and (is_master_branch or is_main_branch) )

            local is_pull_request = (
                  (array_contains_value(actions, event.body.action)) and 
                  (event.body["X-GitHub-Event"] == "pull_request") and 
                  (event.body.pull_request.state == "open") and
                  ((event.body.pull_request.base.ref == "master") or (event.body.pull_request.base.ref == "main"))
                  )

            event.body_custom = {}
            event.body_custom.html_url = event.body.repository.html_url
            event.body_custom.ssh_url = event.body.repository.ssh_url
            event.body_custom.clone_url = event.body.repository.clone_url
            event.body_custom.repository_name = event.body.repository.name
            event.body_custom.repository_full_name = event.body.repository.full_name
            event.body_custom.commit_sha = event.body.after

            event.body_custom.is_default_branch = is_default_branch
            event.body_custom.is_pull_request = is_pull_request

            local directory = "typescript/"
            directory_is_modified = event.body.head_commit and ( 
                                 any_starts_with(event.body.head_commit.modified, directory) or
                                 any_starts_with(event.body.head_commit.added, directory) or
                                 any_starts_with(event.body.head_commit.removed, directory)
                                 )

            event.body_custom.should_trigger_workflow = (is_default_branch and directory_is_modified) or is_pull_request
            event.body_custom.ref = event.body.ref
            
            if event.body.ref then
                -- Extract branch name out of ref field value e.g refs/heads/master -> master
                event.body_custom.branch = string.match(event.body.ref, "([^/]+)$")
            elseif is_pull_request then
                event.body_custom.branch = event.body.pull_request.head.ref
            end


            printf("Mapped info start=======")
            printf("directory_is_modified: %s", directory_is_modified)
            printf("event.body_custom.html_url: %s", event.body_custom.html_url)
            printf("event.body_custom.ssh_url: %s", event.body_custom.ssh_url)
            printf("event.body_custom.clone_url: %s", event.body_custom.clone_url)
            printf("event.body_custom.repository_name: %s", event.body_custom.repository_name)
            printf("event.body_custom.repository_full_name: %s", event.body_custom.repository_full_name)
            printf("event.body_custom.is_default_branch: %s", event.body_custom.is_default_branch)
            printf("event.body_custom.is_pull_request: %s", event.body_custom.is_pull_request)
            printf("event.body_custom.commit_sha: %s", event.body_custom.commit_sha)
            printf("event.body_custom.should_trigger_workflow: %s", event.body_custom.should_trigger_workflow)
            printf("event.body_custom.branch: %s", event.body_custom.branch)
            printf("event.body_custom.ref: %s", event.body_custom.ref)

            printf("Mapped info Ending=======")

            return event
      filters:
      # This is a luascript. You use double hyphen(--) to comment in lua
        script: |-
          print("Filtering!!!")

          return event.body_custom.should_trigger_workflow
        # if event.body.a == "b" and event.body.d.e == "z" then return true else return false end
        
        # exprLogicalOperator: and
        # exprs:   # expr filter result: EVENT PASS
        #   - expr: event == "push" && branch == "refs/heads/master"   # true
        #     fields:
        #       - name: event
        #         path: body.X-GitHub-Event
        #       - name: branch
        #         path: body.ref
          # - expr: branch == master   # true
          #   fields:
          #     - name: branch
          #       path: body.ref
        # dataLogicalOperator: and
        # data:
        #   # Name of the event that triggered the delivery: [pull_request, push, yadayadayada]
        #   # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads
        #   - path: body.X-GitHub-Event
        #     type: string
        #     value:
        #       - pull_request
        #   - path: body.action
        #     type: string
        #     value:
        #       - opened
        #       - edited
        #       - reopened
        #       - synchronize
        #   - path: body.pull_request.state
        #     type: string
        #     value:
        #       - open
        #   - path: body.pull_request.base.ref
        #     type: string
        #     value:
        #       - master
  triggers:
    - template:
        name: argo-workflow-trigger
        argoWorkflow:
          operation: submit
          # args:
          #   - --node-field-selector
          #   - phase=abc
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: Workflow
              metadata:
                # name: github-
                generateName: github-ci-pipe-
                # namespace: argo-events
                namespace: ci
              spec:
                serviceAccountName: sa-typescript-ci-workflow
                arguments:
                    parameters:
                      - name: pr-title
                      - name: pr-number
                      - name: short-sha
                     
                workflowTemplateRef:        
                    name: typescript-ci
  # triggers:
  #   - template:
  #       name: github-workflow-trigger
  #       k8s:
  #         operation: create
  #         source:
  #           resource:
  #             apiVersion: argoproj.io/v1alpha1
  #             kind: Workflow
  #             metadata:
  #               # name: github-
  #               generateName: github-ci-pipe-
  #               # namespace: argo-events
  #               namespace: ci
  #             spec:
  #               serviceAccountName: sa-typescript-ci-workflow
  #               workflowTemplateRef:        
                    # name: typescript-ci

                # entrypoint: whalesay
                # arguments:
                #   parameters:
                #     - name: pr-title
                #     - name: pr-number
                #     - name: short-sha
                # templates:
                #   - name: whalesay
                #     inputs:
                #       parameters:
                #         - name: pr-title
                #         - name: pr-number
                #         - name: short-sha
                #     container:
                #       # image: docker/whalesay:latest
                #       # command: [cowsay]
                #       image: node:19.0.0
                #       # workingDir: /app/src/typescript
                #       command: [sh, -euxc]
                #       # args: ["{{inputs.parameters.pr-title}}"]
                #       args:
                #           - |
                #             echo "TITLE starts"
                #             echo "{{inputs.parameters.pr-title}}"
                #             echo "TITLE ends"

                      # args:
                      #   |
                      #   echo
          parameters:
            - src:
                dependencyName: test-dep
                dataKey: body_custom.clone_url
              dest: spec.arguments.parameters.0.value
            - src:
                dependencyName: test-dep
                dataKey: body_custom.branch
              dest: spec.arguments.parameters.1.value
            - src:
                dependencyName: test-dep
                dataTemplate: "{{ .Input.body_custom.commit_sha | substr 0 7 }}"
              dest: spec.arguments.parameters.2.value
            # Append pull request number and short sha to dynamically assign workflow name <github-21500-2c065a>
            # - src:
            #     dependencyName: test-dep
            #     # dataTemplate: "{{ .Input.body.pull_request.number }}-{{ .Input.body.pull_request.head.sha | substr 0 7 }}"
            #     dataKey: body_custom.repository_name
            #   dest: metadata.name
            #   operation: append
      retryStrategy:
        steps: 3
      