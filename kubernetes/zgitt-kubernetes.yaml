---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: role-namespace-admin
    namespace: ci
rules:
    - apiGroups: [''] # "" indicates the core API group
      resources: ['services', 'pods', 'deployments', 'configmaps']
      verbs: ['get', 'watch', 'list', 'patch', 'put', 'create']
---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: sa-ci-workflow # arbitrary but unique string
    namespace: ci
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: sa-ci-workflow:role-namespace-admin
    namespace: ci
subjects:
    - kind: ServiceAccount
      # Reference to upper's `metadata.name`
      name: sa-ci-workflow
      # Reference to upper's `metadata.namespace`
      namespace: ci
roleRef:
    kind: Role
    name: role-namespace-admin
    apiGroup: rbac.authorization.k8s.io
---
# Another one
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
    name: executor
    namespace: ci
rules:
    - apiGroups: ['argoproj.io']
      resources: ['workflowtaskresults']
      verbs: ['create', 'patch']

---
apiVersion: v1
kind: ServiceAccount
metadata:
    name: sa-kubernetes-ci-workflow # arbitrary but unique string
    namespace: ci
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
    name: sa-kubernetes-ci-workflow:executor
    namespace: ci
subjects:
    - kind: ServiceAccount
      # Reference to upper's `metadata.name`
      name: sa-kubernetes-ci-workflow
      # Reference to upper's `metadata.namespace`
      namespace: ci
roleRef:
    kind: Role
    name: executor
    apiGroup: rbac.authorization.k8s.io
---
# # Another one ends
# apiVersion: v1
# kind: Secret
# metadata:
#     name: argo-workflows-s3-seaweedfs
#     namespace: ci
# # type: Opaque
# type: kubernetes.io/basic-auth
# stringData:
#     username: Oyelowo
#     password: github_pat_xxxx
#     accesskey: h7EPYnL0Zz4hdYh2
#     secretkey: xxx
# ---

apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
    name: kubernetes-ci
    namespace: ci
    annotations:
        workflows.argoproj.io/description: |
            This workflows builds and tests Argo Workflows.

            It demonstrates:

            * Cache restore and store.
            * Publishing test reports.
spec:
    arguments:
        parameters:
            - name: branch
              value: master

    entrypoint: main
    onExit: cache-store

    volumeClaimTemplates:
        - metadata:
              name: work
          spec:
              accessModes: [ReadWriteOnce]
              # storageClassName: linode-block-storage
              # storageClassName: linode-block-storage-retain
              resources:
                  requests:
                      storage: 1Gi
                      memory: 1Gi
                      cpu: '1'
                  limits:
                      memory: 1Gi
                      cpu: '1'
                      # requests:
                      #     storage: 64Mi

    templates:
        - name: main
          dag:
              failFast: true
              tasks:
                  - name: setup-and-restore-npm-cache
                    template: setup-and-restore-npm-cache
                  - name: check
                    template: check
                    dependencies:
                        - setup-and-restore-npm-cache
                  - name: test
                    template: test
                    dependencies:
                        - setup-and-restore-npm-cache

                  - name: generate-and-push-manifests
                    template: generate-and-push-manifests
                    dependencies:
                        - check
                        - test

        - name: setup-and-restore-npm-cache
          # continueOn:
          #   failed: true
          #   error: true
          inputs:
              artifacts:
                  - name: NPM_CACHE
                    path: /mnt/NPM_CACHE
                    optional: true
                    s3:
                        key: github.com/{{workflow.parameters.branch}}/kubernetes/NPM_CACHE.tgz
                        # bucket: argo-workflows
                        # createBucketIfNotPresent:
                        #   enabled: true
                        #   objectLocking: true

                  - name: code
                    path: /mnt/app/src
                    git:
                        repo: https://github.com/Oyelowo/modern-distributed-app-template.git
                        branch: '{{inputs.parameters.branch}}'
                        usernameSecret:
                            name: argo-workflows-s3-seaweedfs
                            key: username
                        passwordSecret:
                            name: argo-workflows-s3-seaweedfs
                            key: password
                        # revision: cfe12d6

          container:
              volumeMounts:
                  - mountPath: /app/src
                    name: work
                    # We use subpath here to share the "work" volume for the two mount paths. Otherwise
                    # The second one will overwrite the first as they use the same volume(work)
                    # Otherwise, we would have to create separate volumes for them if we dont want to use subPath
                    # which would make things more verbose
                    subPath: src
                  # "npm config get cache" should be at /root/.npm
                  - mountPath: /root/.npm
                    name: work
                    subPath: NPM_CACHE
              image: node:19.0.0
              workingDir: /app/src/kubernetes
              command: [sh, -euxc]
              args:
                  - |
                      # # echo "INFO: Copy source code from git repo to current working directory"
                      cp -Rf /mnt/app/src/kubernetes/. .

                      NPM_CACHE_DIR=$(npm config get cache)
                      [ -e /mnt/NPM_CACHE ] && cp -Rf /mnt/NPM_CACHE/. $NPM_CACHE_DIR
                      npm ci --prefer-offline


        - name: test
          container:
              image: node:19.0.0
              volumeMounts:
                  - mountPath: /app/src
                    name: work
                    subPath: src
                  - mountPath: /root/.npm
                    name: work
                    subPath: NPM_CACHE
              workingDir: /app/src/kubernetes
              command: [sh, -euxc]
              args:
                  - |
                      make test
                      echo "END: ls -lart modern-distributed-app-template"

        - name: check
          container:
              image: node:19.0.0
              volumeMounts:
                  - mountPath: /app/src
                    name: work
                    subPath: src
                  - mountPath: /root/.npm
                    name: work
                    subPath: NPM_CACHE
              workingDir: /app/src/kubernetes
              command: [sh, -euxc]
              args:
                  - |
                      make check

        - name: generate-and-push-manifests
          container:
              image: node:19.0.0
              volumeMounts:
                  - mountPath: /app/src
                    name: work
                    subPath: src
                  - mountPath: /root/.npm
                    name: work
                    subPath: NPM_CACHE
              workingDir: /app/src/kubernetes
              command: [sh, -euxc]
              args:
                  - |
                      make generate_manifests_ci environment=production

        - name: cache-store
          container:
              volumeMounts:
                  - mountPath: /app/src
                    name: work
                    subPath: src
                  - mountPath: /root/.npm
                    name: work
                    subPath: NPM_CACHE
              image: node:19.0.0
              workingDir: /app/src/kubernetes

          outputs:
              artifacts:
                  - name: NPM_CACHE
                    path: /root/.npm
                    optional: true
                    s3:
                        key: github.com/{{workflow.parameters.branch}}/kubernetes/NPM_CACHE.tgz

---
apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
    generateName: kubernetes-ci-
    namespace: ci
spec:
    serviceAccountName: sa-kubernetes-ci-workflow
    # synchronization:
    #     mutex:
    #       name: workflow
    # artifactRepositoryRef:
    #   configMap: my-artifact-repository # default is "artifact-repositories"
    #   key: default-v1-s3-artifact-repository # default can be set by the `workflows.argoproj.io/default-artifact-repository` annotation in config map.
    workflowTemplateRef:
        name: kubernetes-ci
# - path: '[body.commits.#.modified.#()#,body.commits.#.added.#()#,body.commits.#.removed.#()#]'
#   type: string
#   value:
#       - '.*service/jobs.*'
#       - '.*service/common.*'

# - path: "[body.commits.#.modified.#(%\"*service*\")#,body.commits.#.added.#(%\"*service*\")#,body.commits.#.removed.#(%\"*service*\")#]"
#   type: string
#   value:
#     - "(\\bservice/jobs\\b)|(\\bservice/common*)"
